<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ohgiraffers.refactorial.board.model.dao.BoardMapper">
    <resultMap id="boardResultMap" type="com.ohgiraffers.refactorial.board.model.dto.BoardDTO">
        <id property="postId" column="post_id"/>
        <result property="postTitle" column="post_title"/>
        <result property="postContent" column="post_content"/>
        <result property="postCreationDate" column="post_creationDate"/>
        <result property="postModificationDate" column="post_modificationDate"/>
        <result property="empId" column="emp_id"/>
        <result property="empName" column="emp_name"/>
        <result property="categoryCode" column="category_code"/>
        <result property="attachment" column="attachment"/>
    </resultMap>

    <!-- 게시물 전체 조회 -->
    <select id="postList" parameterType="int" resultMap="boardResultMap">
        SELECT
            *
        FROM
            tbl_post p
        LEFT JOIN
            employee e
        ON
            p.emp_id = e.emp_id
        WHERE
            p.category_code = #{categoryCode}
        ORDER BY
            p.post_creationDate DESC
        LIMIT
            #{limit} OFFSET #{offset};
    </select>

    <!-- 게시물 카테고리별 카운트 -->
    <select id="getBoardListCount" parameterType="com.ohgiraffers.refactorial.board.model.dto.BoardDTO">
        SELECT
        COUNT(*)
        FROM
        tbl_post p
        LEFT JOIN
        employee e
        ON
        p.emp_id = e.emp_id
        WHERE
        p.category_code = #{categoryCode}
        ORDER BY
        p.post_creationDate DESC;
    </select>

    <!-- 게시물 등록 -->
    <insert id="boardPost" parameterType="com.ohgiraffers.refactorial.board.model.dto.BoardDTO">
        insert into tbl_post
        (
        post_id,
        post_title,
        post_content,
        post_creationDate,
        emp_id,
        post_modificationDate,
        category_code,
        attachment
        )
        values
        (
        #{postId},
        #{postTitle},
        #{postContent},
        #{postCreationDate},
        #{empId},
        #{postModificationDate},
        #{categoryCode},
        #{attachment}
        )
    </insert>

    <!-- 투표 항목 조회 -->
    <select id="itemView" parameterType="com.ohgiraffers.refactorial.board.model.dto.VoteItemDTO">
        select
            *
        from
            tbl_vote_item
        where
            post_id = #{postId}
    </select>

    <!-- 투표 항목 등록 -->
    <insert id="optionResult" parameterType="com.ohgiraffers.refactorial.board.model.dto.VoteItemDTO">
        insert into tbl_vote_item
        (
        post_id,
        item_title
        )
        value
        (
        #{postId},
        #{itemTitle}
        )
    </insert>

    <!-- 투표항목 선택결과 조회 -->
    <select id="getVoteResults" parameterType="com.ohgiraffers.refactorial.board.model.dto.VoteResultDTO">
        select
        item_id, count(item_id) as vote_count
        from
        tbl_vote_result
        where
        post_id = #{postId}
        group by item_id
    </select>

    <!-- 투표 결과 생성 -->
    <insert id="voteResult" parameterType="com.ohgiraffers.refactorial.board.model.dto.VoteResultDTO">
        INSERT INTO tbl_vote_result (
        emp_id,
        item_id,
        post_id
        )
        VALUES
        <foreach collection="voteItemList" item="item" separator=",">
            (
            #{item.empId},
            #{item.itemId},
            #{item.postId}
            )
        </foreach>
    </insert>

    <!-- 게시물 상세페이지 -->
    <select id="postDetail" parameterType="String" resultMap="boardResultMap">
        SELECT
            *
        FROM
            tbl_post AS p
        JOIN
            employee AS e
        ON
            p.emp_id = e.emp_id
        WHERE
            p.post_id = #{postId}
    </select>

    <!-- 게시물 수정 -->
    <update id="updatePost" parameterType="com.ohgiraffers.refactorial.board.model.dto.BoardDTO">
        update tbl_post
        set
        post_title = #{postTitle},
        post_content = #{postContent},
        category_code = #{categoryCode},
        post_modificationDate = #{postModificationDate}
        where
        post_id = #{postId}
    </update>

    <!-- 게시물 삭제 -->
    <delete id="postDelete" parameterType="String">
        DELETE FROM tbl_post
        WHERE post_id = #{postId}
    </delete>

    <!-- 댓글 등록 -->
    <insert id="comment" parameterType="com.ohgiraffers.refactorial.board.model.dto.CommentDTO">
        insert into tbl_comment
        (
        post_id,
        emp_id,
        comment_content,
        comment_creationDate
        )
        values
        (
        #{postId},
        #{empId},
        #{commentContent},
        #{commentCreationDate}
        )
    </insert>

    <!-- 댓글 조회 -->
    <select id="commentView" parameterType="String" resultType="com.ohgiraffers.refactorial.board.model.dto.CommentDTO">
        SELECT
            *
        FROM
            tbl_comment AS c
        JOIN
            employee AS e
        ON
            c.emp_id = e.emp_id
        WHERE
            c.post_id = #{postId}
        ORDER BY
            c.comment_creationDate ;
    </select>

    <!-- 댓글 삭제 -->
    <delete id="commentDelete" parameterType="int">
        delete from tbl_comment
        where comment_id = #{commentId}
    </delete>

    <!-- 투표한 사람에게 보여주는 항목 -->
    <select id="voteComplete" parameterType="com.ohgiraffers.refactorial.board.model.dto.VoteResultDTO">
        select
            *
        from
            tbl_vote_result
        where
            post_id = #{postId}
            and emp_id = #{empId}
    </select>

    <!-- 사용자가 특정 게시물에서 투표한 항목을 조회 (12/22) -->
<!--    <select id="getUserVote" resultType="com.ohgiraffers.refactorial.board.model.dto.VoteResultDTO">-->
<!--        SELECT-->
<!--        vi.item_id AS itemId,        &lt;!&ndash; VoteItemDTO의 itemId &ndash;&gt;-->
<!--        vi.item_title AS itemTitle  &lt;!&ndash; VoteItemDTO의 itemTitle &ndash;&gt;-->
<!--        FROM-->
<!--        tbl_vote_result vr-->
<!--        JOIN-->
<!--        tbl_vote_item vi ON vr.item_id = vi.item_id-->
<!--        WHERE-->
<!--        vr.post_id = #{postId}      &lt;!&ndash; 매개변수 postId &ndash;&gt;-->
<!--        AND vr.emp_id = #{empId}    &lt;!&ndash; 매개변수 empId &ndash;&gt;-->
<!--    </select>-->


</mapper>